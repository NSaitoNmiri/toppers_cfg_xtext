/*
 * generated by Xtext 2.17.0
 */
package jp.toppers.cfg.tests

import com.google.inject.Inject
import jp.toppers.cfg.cfg.CfgFile
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import jp.toppers.cfg.cfg.C_IncludeLine
import jp.toppers.cfg.cfg.C_DefineLine
import jp.toppers.cfg.cfg.StaticApi
import jp.toppers.cfg.cfg.C_Identifier

@RunWith(XtextRunner)
@InjectWith(CfgInjectorProvider)
class CfgParsingTest {
	@Inject extension ParseHelper<CfgFile> parseHelper
	@Inject extension ValidationTestHelper

	@Test
	def void test_0_1_EmptyFile() {
		var cfgFile = ''''''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_0_2_EmptyFile() {
		var cfgFile = ''' '''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_0_3_EmptyFile() {
		var cfgFile = '''	'''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_0_4_EmptyFile() {
		var cfgFile =
		'''
		'''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_1_1_EmptyFile() {
		var cfgFile = '''//'''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_1_2_EmptyFile() {
		var cfgFile =
		'''
		//
		'''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_2_1_EmptyFile() {
		var cfgFile = '''/* test */'''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_2_2_EmptyFile() {
		var cfgFile = '''
		/*
		 * test
		 */'''.parse
		Assert.assertNotNull(cfgFile)
		cfgFile.assertNoErrors
		Assert.assertEquals(0, cfgFile.c_directives.length())
	}

	@Test
	def void test_1_1_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, "<test1.h>");
	}
	
	@Test
	def void test_1_2_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <'>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, "<'>");
	}

	// this test is successful, but validator will check
	@Test
	def void test_1_3_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test.h >
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, "<test.h >");
	}

	@Test
	def void test_1_4_CInclude_HHeaderFile() {
		val cfgFile = '''
			// Test
			# include <test1.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, "<test1.h>");
	}

	@Test
	def void test_1_5_CInclude_HHeaderFile() {
		val cfgFile = '''
			/* Test */
			# include <test1.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, "<test1.h>");
	}

	@Test
	def void test_1_6_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h> /* Comment */
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, "<test1.h>");
	}

	@Test
	def void test_2_1_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h>
			#include <test2.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, "<test1.h>");
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, "<test2.h>");
	}

	@Test
	def void test_2_2_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h>
			
			#include <test2.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, "<test1.h>");
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, "<test2.h>");
	}

	@Test
	def void test_2_3_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h> // Test
			#include <test2.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, "<test1.h>");
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, "<test2.h>");
	}

	@Test
	def void test_2_4_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h> /* Test */
			#include <test2.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, "<test1.h>");
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, "<test2.h>");
	}

	@Test
	def void test_2_5_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h>
			// Test
			#include <test2.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, "<test1.h>");
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, "<test2.h>");
	}

	@Test
	def void test_4_1_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h>
			#include <test2.h>
			#include <test3.h>
			#include <test4.h>
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, "<test1.h>");
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, "<test2.h>");
		var line3 = cfgFile.c_directives.get(2).line
		Assert.assertTrue(line3 instanceof C_IncludeLine)
		Assert.assertEquals((line3 as C_IncludeLine).name, "<test3.h>");
		var line4 = cfgFile.c_directives.get(3).line
		Assert.assertTrue(line4 instanceof C_IncludeLine)
		Assert.assertEquals((line4 as C_IncludeLine).name, "<test4.h>");
	}

	@Test
	def void test_Err_1_1_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include test1.h
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_2_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <test1.h
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_3_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include test1.h>
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_4_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <>
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_5_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <>>
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_6_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include<test.h>
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_7_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include < test.h>
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_9_CInclude_HHeaderFile() {
		val cfgFile = '''
			#include <tes t.h >
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue(errors.isEmpty)
	}

	@Test
	def void test_1_1_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include "test1.h"
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, '"test1.h"');
	}
	
	@Test
	def void test_1_2_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include "<"
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_IncludeLine)
		Assert.assertEquals((line as C_IncludeLine).name, '"<"');
	}

	@Test
	def void test_2_1_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include "test1.h"
			#include "test2.h"
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, '"test1.h"');
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, '"test2.h"');
	}

	@Test
	def void test_4_1_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include "test1.h"
			#include "test2.h"
			#include "test3.h"
			#include "test4.h"
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, '"test1.h"');
		var line2 = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line2 instanceof C_IncludeLine)
		Assert.assertEquals((line2 as C_IncludeLine).name, '"test2.h"');
		var line3 = cfgFile.c_directives.get(2).line
		Assert.assertTrue(line3 instanceof C_IncludeLine)
		Assert.assertEquals((line3 as C_IncludeLine).name, '"test3.h"');
		var line4 = cfgFile.c_directives.get(3).line
		Assert.assertTrue(line4 instanceof C_IncludeLine)
		Assert.assertEquals((line4 as C_IncludeLine).name, '"test4.h"');
	}

	@Test
	def void test_Err_1_1_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include "test1.h
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_2_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include test1.h"
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_3_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include ""
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_4_CInclude_QHeaderFile() {
		val cfgFile = '''
			#include """
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_1_0_CDefine() {
		val cfgFile = '''
			#define TEST1
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)
		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");
		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 0);
	}

	@Test
	def void test_1_1_CDefine() {
		val cfgFile = '''
			#define TEST1 test1
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)

		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test1");
	}

	@Test
	def void test_1_2_CDefine() {
		val cfgFile = '''
			#define TEST1 test1 test2
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)

		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 2);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test1");

		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test2");
	}

	@Test
	def void test_1_3_CDefine() {
		val cfgFile = '''
			#define TEST1 test1 	test2
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)

		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 2);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test1");

		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test2");
	}

	@Test
	def void test_1_4_CDefine() {
		val cfgFile = '''
			#define TEST1 test1 test2 test3 test4
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)

		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 4);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test1");

		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test2");

		elem = list.get(2)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test3");

		elem = list.get(3)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test4");
	}

	@Test
	def void test_2_1_CDefine() {
		val cfgFile = '''
			#define TEST1 test1
			#define TEST2 test2
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		Assert.assertEquals(cfgFile.c_directives.length, 2);

		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)
		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test1");

		line = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST2");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test2");
	}

	@Test
	def void test_2_2_CDefine() {
		val cfgFile = '''
			#define TEST1 test11 test12
			#define TEST2 test21 test22
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		Assert.assertEquals(cfgFile.c_directives.length, 2);

		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)
		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 2);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test11");

		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test12");

		line = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST2");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 2);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test21");
		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test22");
	}

	@Test
	def void test_4_1_CDefine() {
		val cfgFile = '''
			#define TEST1 test1
			#define TEST2 test2
			#define TEST3 test3
			#define TEST4 test4
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		Assert.assertEquals(cfgFile.c_directives.length, 4);

		// line 0
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)
		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test1");

		// line 1
		line = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST2");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test2");

		// line 2
		line = cfgFile.c_directives.get(2).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST3");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test3");

		// line 3
		line = cfgFile.c_directives.get(3).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST4");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 1);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test4");
	}

	@Test
	def void test_4_2_CDefine() {
		val cfgFile = '''
			#define TEST1 test11 test12 test13 test14
			#define TEST2 test21 test22 test23 test24
			#define TEST3 test31 test32 test33 test34
			#define TEST4 test41 test42 test43 test44
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		Assert.assertEquals(cfgFile.c_directives.length, 4);

		// line 0
		var line = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line instanceof C_DefineLine)
		var defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		var id = defLine.name
		Assert.assertEquals(id.value, "TEST1");

		var list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 4);
		var elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test11");
		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test12");
		elem = list.get(2)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test13");
		elem = list.get(3)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test14");

		// line 1
		line = cfgFile.c_directives.get(1).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST2");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 4);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test21");
		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test22");
		elem = list.get(2)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test23");
		elem = list.get(3)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test24");

		// line 2
		line = cfgFile.c_directives.get(2).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST3");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 4);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test31");
		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test32");
		elem = list.get(2)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test33");
		elem = list.get(3)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test34");

		// line 3
		line = cfgFile.c_directives.get(3).line
		Assert.assertTrue(line instanceof C_DefineLine)
		defLine = line as C_DefineLine
		Assert.assertTrue(defLine.name instanceof C_Identifier)
		id = defLine.name
		Assert.assertEquals(id.value, "TEST4");

		list = (line as C_DefineLine).replacement
		Assert.assertEquals(list.length, 4);
		elem = list.get(0)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test41");
		elem = list.get(1)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test42");
		elem = list.get(2)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test43");
		elem = list.get(3)
		Assert.assertTrue(elem instanceof C_Identifier)
		Assert.assertEquals((elem as C_Identifier).value, "test44");
	}

	@Test
	def void test_Err_1_1_CDefine() {
		val cfgFile = '''
			#define
			TEST1 test1
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_2_CDefine() {
		val cfgFile = '''
			#define TEST1 
			test1
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_1_1_Include() {
		val cfgFile = '''
			INCLUDE("test1.cfg");
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, '"test1.cfg"');
	}

	@Test
	def void test_1_2_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>);
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api = cfgFile.apis.get(0) as StaticApi
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_3_Include() {
		val cfgFile = '''
			INCLUDE (<test1.cfg>);
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_4_Include() {
		val cfgFile = '''
			INCLUDE( <test1.cfg>);
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_5_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg> );
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_6_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>) ;
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_7_Include() {
		val cfgFile = '''
			INCLUDE
			(<test1.cfg)>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg)>");
	}

	@Test
	def void test_1_8_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg)>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg)>");
	}

	@Test
	def void test_1_9_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>); // Test
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_10_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>); /* Test */
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_11_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>); /*
			                       * Test
			                       */
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_12_Include() {
		val cfgFile = '''
			INCLUDE /* Test */(<test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_13_Include() {
		val cfgFile = '''
			INCLUDE (/* Test */<test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_14_Include() {
		val cfgFile = '''
			INCLUDE (<test1.cfg>/* Test */);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
	}

	@Test
	def void test_1_15_Include() {
		val cfgFile = '''
			INCLUDE (<test1.cfg>);
			// test
			#include <test1.h>
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, '<test1.h>');
	}

	@Test
	def void test_1_16_Include() {
		val cfgFile = '''
			#include <test1.h>
			// test
			INCLUDE (<test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)

		var api = cfgFile.apis.get(0)
		Assert.assertEquals(api.line.name, "<test1.cfg>");
		var line1 = cfgFile.c_directives.get(0).line
		Assert.assertTrue(line1 instanceof C_IncludeLine)
		Assert.assertEquals((line1 as C_IncludeLine).name, '<test1.h>');
	}

	@Test
	def void test_2_1_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>);
			INCLUDE(<test2.cfg>);
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api1 = cfgFile.apis.get(0)
		Assert.assertEquals(api1.line.name, "<test1.cfg>");
		var api2 = cfgFile.apis.get(1)
		Assert.assertEquals(api2.line.name, "<test2.cfg>");
	}

	@Test
	def void test_2_2_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>);INCLUDE(<test2.cfg>);
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api1 = cfgFile.apis.get(0)
		Assert.assertEquals(api1.line.name, "<test1.cfg>");
		var api2 = cfgFile.apis.get(1)
		Assert.assertEquals(api2.line.name, "<test2.cfg>");
	}

	@Test
	def void test_4_1_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>);
			INCLUDE(<test2.cfg>);
			INCLUDE(<test3.cfg>);
			INCLUDE(<test4.cfg>);
		'''.parse

		Assert.assertNotNull(cfgFile)
		val errors = cfgFile.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
		
		var api1 = cfgFile.apis.get(0)
		Assert.assertEquals(api1.line.name, "<test1.cfg>");
		var api2 = cfgFile.apis.get(1)
		Assert.assertEquals(api2.line.name, "<test2.cfg>");
		var api3 = cfgFile.apis.get(2)
		Assert.assertEquals(api3.line.name, "<test3.cfg>");
		var api4 = cfgFile.apis.get(3)
		Assert.assertEquals(api4.line.name, "<test4.cfg>");
	}

	@Test
	def void test_Err_1_1_Include() {
		val cfgFile = '''
			INCLUDE <test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_2_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>;
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_3_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>)
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_4_Include() {
		val cfgFile = '''
			INCLUDE((<test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_1_5_Include() {
		val cfgFile = '''
			INCLUDE()<test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}

	@Test
	def void test_Err_2_1_Include() {
		val cfgFile = '''
			INCLUDE(<test1.cfg>)INCLUDE(<test1.cfg>);
		'''.parse

		val errors = cfgFile.eResource.errors
		Assert.assertFalse(errors.isEmpty)
	}
}
